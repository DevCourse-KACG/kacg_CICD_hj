# 워크플로우 이름
name: KACG Spring CI/CD

# 워크플로우 실행 조건
on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

# 환경 변수 설정
env:
  IMAGE_NAME: ghcr.io/devcourse-kacg/kacg_cicd_hj

jobs:
  # ========================
  # CI Job: 테스트 및 빌드
  # ========================
  build-and-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    # 이 Job의 모든 단계를 Backend_Kotlin 디렉토리 안에서 실행하도록 설정
    defaults:
      run:
        working-directory: ./Backend_Kotlin
    # --------------------

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          # 경로에 Backend_Kotlin을 추가하여 올바른 위치를 캐싱하도록 수정
          path: |
            Backend_Kotlin/~/.gradle/caches
            Backend_Kotlin/~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/Backend_Kotlin/**/*.gradle*', '**/Backend_Kotlin/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Test with Gradle
        run: ./gradlew test

      - name: Build with Gradle
        run: ./gradlew build
        
  # ========================
  # CD Job: 이미지 빌드 및 배포
  # ========================
  build-and-deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set image tag
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=develop" >> $GITHUB_ENV
          fi

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # Docker 빌드의 컨텍스트(작업 디렉토리)를 Backend_Kotlin으로 지정
          context: ./Backend_Kotlin
          # --------------------
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2에서 GHCR 로그인
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
            
            # 기존 컨테이너 중지 및 삭제 (오류 무시)
            docker rm -f my-spring-app || true
            
            # 최신 이미지 pull
            docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            
            # 새 컨테이너 실행
            docker run -d \
              --name my-spring-app \
              --restart unless-stopped \
              --network common \
              -p 8080:8080 \
              -e DB_URL="jdbc:mysql://mysql_1:3306/${{ secrets.DB_NAME }}" \
              -e DB_USERNAME="lldj" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e SPRING_CLOUD_AWS_S3_BUCKET="${{ secrets.S3_BUCKET }}" \
              -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
              -e FRONTEND_BASE_URL="${{ secrets.FRONTEND_BASE_URL }}" \
              ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            # 사용하지 않는 Docker 이미지 정리 (디스크 용량 확보)
            docker image prune -f
